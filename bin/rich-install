#!/usr/bin/env node

const { program } = require('commander');
const chalk = require('chalk');
const { askQuestions } = require('../lib/utils')
const { packageType } = require('../lib/questions')
const service = require('../lib/service.js')
const { 
  command,
  resolve,
  exists,
  mkdir,
  touch,
  stat,
  isRemoteRegistry,
  readFile,
  writeFile,
  oraPromise,
  jsonFormat,
  rm,
  gitBranchIs
} = require('../lib/utils.js');
// 默认的vscode配置
const SETTINGS_CONFIG = require('../.vscode/settings.json')
// 需要删除的文件
const DELETE_FILES = ['.eslintrc.json', '.eslintrc.yaml', '.eslintrc.js', '.prettierrc.js','.prettierignore']
// .gitignore忽略的文件
const GIT_IGNORE = ['node_modules', '.DS_Store', 'dist', '.idea']
const PACKAGE_INSTALLERS = {
  'npm': {
    command: 'npm',
    install: "npm install",
    uninstall: 'npm uninstall',
    suffix: '-D'
  },
  'yarn': {
    command: 'yarn',
    install: "yarn add",
    uninstall: 'yarn remove',
    suffix: '--dev'
  },
  'pnpm': {
    command: 'pnpm',
    install: "pnpm add",
    uninstall: 'pnpm remove',
    suffix: '-D'
  }
}

program
  .name('rich')
  .usage('install <plugin-name>')
  .on('--help', () => {
    console.log('  例如:')
    console.log()
    console.log(chalk.gray('    # 安装插件'))
    console.log('    $ rich install eslint')
    console.log()
  })
  .on('exit', console.log)
  .parse(process.argv)

function help() {
  if (program.args.length < 1) return program.help()
}

help()

// const INSTALL_PLUGIN_NAME = program.args[0]; // 安装的插件名称，例如: eslint

class Package {
  constructor () {
    this.packageJson = {};      // package.json文件转对象
  }

  /**
   * @description 读取package.json文件
   */
  async readPackageJson () {
    const jsonStr = await readFile('package.json')
    this.packageJson = JSON.parse(jsonStr) || {}
    return this.packageJson;
  }

  /**
   * @description 更新package.json
   * @param { newPackageJson: string } 新的 packagejson 对象
   * @returns 
   */
  updatePackageJson (newPackageJson) {
    this.packageJson = newPackageJson
    return writeFile('package.json', jsonFormat(newPackageJson))
  }

 /**
  * @description 获取 vue 版本
  * @returns { number }
  */
  getVueVersion () {
    const version = this.packageJson?.['dependencies']?.['vue'] || ''
    return version ? version.match(/\d/)[0] : null
  }

  /**
   * @description 删除 package.json 中指定的属性
   * @param key 要删除的key
   */
  removeKey (key) {
    if (this.packageJson[key]) delete this.packageJson[key];
  }

  /**
   * @description 删除 package.json 中 eslintConfig和prettier 两个配置项
   */
  async removeConfigFromPackageJson () {
    const lastestPackageJson = await this.readPackageJson();
    ['eslintConfig', 'prettier'].forEach(this.removeKey.bind(this))
    return await this.updatePackageJson(lastestPackageJson)
  }
}

class FileOperator {
  /**
 * @description 是否初始化了 git
 * @returns Promise<Boolean>
 */
  static isInitGit () {
    return stat('.git')
  }

  /**
 * @description 是否初始化了 npm
 * @returns Promise<Boolean>
 */
  static isInitNpm () {
    return stat('package.json')
  }

  /**
   * @description 是否有.gitignore文件
   * @returns 
   */
   static hasGitignore () {
    return stat('.gitignore')
  }
  
  /**
   * @description 创建.gitignore 文件
   * @param ignoreRegs 
   */
   static createGitIgnore = (ignoreRegs) => {
    return touch('.gitignore', jsonFormat(ignoreRegs))
  }

  /**
   * @description 获取 eslint 配置模板对象
   * @param { vueVersion: Number } vue版本
  */
  static getESLintConfig (vueVersion) {
    const base = {
      extends: ["eslint:recommended"],
      rules: {}
    }
    if (vueVersion) {
      base.extends.push(Number(vueVersion) === 2 ? 'plugin:vue/recommended' : "plugin:vue/vue3-recommended")
    }
    base.extends.push("eslint-config-rich")
    return base;
  }


  /**
   * @description 写入vscode 配置
  */
  static writeVsCodeConfig (settings) {
    return oraPromise(() => {
      if (!exists('.vscode')) mkdir('.vscode');
      return writeFile('.vscode/settings.json', JSON.stringify(settings, null, '\t'))
    }, {text: '配置vscode'})
  }

  /**
   * @description 写入配置到配置文件
   * @param { object } newObj 写入文件的对象
   * @param { string } path 配置文件路径
   */
  static writeConfigToFile  (newObj, path) {
    const content = jsonFormat(newObj)
    writeFile(path, content)
  }

  /**
   * @description 删除ESLint其余的配置文件和prettier配置
   * 例如：
   * .eslintrc.json
   * .eslintrc
   * .eslintrc.yaml
   */
  static writeESLintConfig (vueVersion , deleteFiles = []) {
    oraPromise(() => {
      // 并发删除配置文件
      let promises = deleteFiles.reduce((promises, filePath) => promises.concat(rm(filePath)), [])
        .map(t => t.catch(() => {}))
      const eslintConfig = this.getESLintConfig(vueVersion)
      // 写入eslint配置
      promises.push(this.writeConfigToFile(eslintConfig, resolve('.eslintrc')))
      return Promise.all(promises)
    }, { text: '配置ESLint' })
  }
}

class CommandOperator {
  constructor () {
    this.packageCommand = {};
  }

  /**
   * @description 初始化安装器
   * @param { installers: Object } 安装器 
   */
  async init (installers) {
    let answer = await askQuestions([packageType])
    this.packageCommand = installers[answer.packtool]
  }
  /**
   * @description 安装依赖
   * @param { string } packtool 包管理工具
   * @param { Array } plugins 需要安装的依赖
   */
  installPlugins (plugins) {
    const { packageCommand } = this
    return plugins.length
      ? command(`${packageCommand.install} ${plugins.join(' ')} ${packageCommand.suffix}`)
      : Promise.resolve()
  }

  /**
   * @description 卸载依赖
   * @param plugins 
   */
  uninstallPlugins (plugins) {
    return plugins.length 
      ? command(`${this.packageCommand.uninstall} ${plugins.join(' ')}`) 
      : Promise.resolve()
  }

  /**
   * @description 使用eslint格式化代码
   */
  formatCodeByEslint () {
    return oraPromise(() => command('npx eslint --fix --ext .js,.vue,.ts'), {text: '格式化代码'})
      .catch(() => {
        console.log(chalk.red('ESLint语法错误无法自动修复，请手动修复或在.eslintrc.js中忽略规则'))
        console.log(chalk.green('修复后请继续执行 `rich lint` 进行校验'))
        process.exit()
      })
  }

  /**
   * @description commit 代码
   * @param { msg: string } 提交的message 
   */
  static async commit (msg) {
    await command('git add .')
    await command(`git commit -m "${msg}"`)
  }
}

/**
 * @description 初始化npm
 */
async function initNPM () {
  if (!await FileOperator.isInitNpm()) {
    await command(`npm init -y`);
    return true
  }
  return false
}

/**
 * @description 初始化git
 */
async function initGit () {
  const promises = []
  const [isInitGit, hasGitignore] = await Promise.all([
    FileOperator.isInitGit(),
    FileOperator.hasGitignore()
  ])
  if (hasGitignore && isInitGit) return false
  if (!hasGitignore) promises.push(FileOperator.createGitIgnore(GIT_IGNORE));        // 不存在.gitignore文件
  if (!isInitGit) promises.push(command('git init'));                               // 没初始化git

  await Promise.all(promises)
  return true
}

const main = async () => {
  const [isNotInitNpm, isNotInitGit] = await Promise.all([initNPM(), initGit()])

  // 如果没有初始化 npm 和 git，初始化完后必须进行一次提交。否则执行 git stash 会报错：您尚未建立初始提交
  if (isNotInitNpm || isNotInitGit) {
    await CommandOperator.commit('init git and npm')
  }
  await service.uncommittedCode()
  
   // 切换到master分支
   if (!await gitBranchIs('master')) {
    await oraPromise(() => command('git checkout master'), {text: '切换 master'})
  }

  // 如果是远程仓库，拉取更新
  if (await isRemoteRegistry()) {
    await oraPromise(() => command('git pull'), {text: '拉取更新'})
  }
  // 创建格式化分支
  await oraPromise(() => command('git checkout -b standard'), {text: '创建 standard 分支'})

  const packageIns = new Package()

  await packageIns.readPackageJson()
  const commandIns = new CommandOperator()
  await commandIns.init(PACKAGE_INSTALLERS)
  const installPlugins = ['eslint-config-rich', 'eslint', 'eslint-plugin-vue']
  const prettierPlugins = Object.keys(packageIns.packageJson?.['devDependencies'] ?? []).filter(t => /prettier|eslint/.test(t))

  await oraPromise(async () => {
    await commandIns.uninstallPlugins(prettierPlugins)
    await commandIns.installPlugins(installPlugins)
    await packageIns.removeConfigFromPackageJson()
  }, {text: '配置依赖'})


  const vueVersion = packageIns.getVueVersion()

  await Promise.all([
    FileOperator.writeESLintConfig(vueVersion, DELETE_FILES),
    FileOperator.writeVsCodeConfig(SETTINGS_CONFIG)
  ])

  // 格式化代码
  await commandIns.formatCodeByEslint()
  
  await CommandOperator.commit('ci: install eslint and format')
  console.log(chalk.green('🎉安装成功, 请到 standard 分支查看最新一次的修改'))
}

main()









